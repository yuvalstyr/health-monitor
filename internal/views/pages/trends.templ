package pages

import (
	"fmt"
	"health-monitor/internal/db"
	"health-monitor/internal/models"
	"health-monitor/internal/views/components"
)

templ TrendsPage(gauge *db.Gauge, history []models.GaugeHistory) {
	@components.Layout(components.Title("Trends")) {
		<div class="container mx-auto px-4 py-8">
			<div class="flex flex-col sm:flex-row items-center justify-between mb-8 gap-4">
				<div>
					<h1 class="text-2xl sm:text-3xl font-bold">{ gauge.Name }</h1>
					<p class="text-base-content/70 text-sm sm:text-base mt-1">Historical Trends</p>
				</div>
				<a 
					href="/" 
					class="btn btn-outline btn-primary btn-sm sm:btn-md"
				>
					<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 sm:h-5 sm:w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
					</svg>
					Back to Dashboard
				</a>
			</div>

			// Chart
			<div class="card bg-base-100 shadow-xl mb-8">
				<div class="card-body p-4 sm:p-6">
					<canvas id="trendsChart" class="w-full h-64 sm:h-80"></canvas>
				</div>
			</div>

			// Stats cards for mobile
			<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-8 md:hidden">
				for _, h := range history {
					<div class="card bg-base-100 shadow">
						<div class="card-body p-4">
							<h3 class="card-title text-lg">{ h.Month }</h3>
							<div class="flex items-center justify-between mt-2">
								<div>
									<p class="text-sm text-base-content/70">Average</p>
									<p class="text-xl font-semibold">{ fmt.Sprintf("%.1f", h.AverageValue) }
										<span class="text-base-content/70 text-sm ml-1">{ gauge.Unit }</span>
									</p>
								</div>
								if h.AverageValue >= gauge.Target {
									<div class="badge badge-error gap-2">
										<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
										</svg>
										Above Target
									</div>
								} else {
									<div class="badge badge-success gap-2">
										<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 17h8m0 0V9m0 8l-8-8-4 4-6-6" />
										</svg>
										On Track
									</div>
								}
							</div>
						</div>
					</div>
				}
			</div>

			// Table for desktop
			<div class="card bg-base-100 shadow-xl hidden md:block">
				<div class="card-body p-4 sm:p-6">
					<div class="overflow-x-auto">
						<table class="table w-full">
							<thead>
								<tr>
									<th>Month</th>
									<th>Average Value</th>
									<th>Target</th>
									<th>Status</th>
								</tr>
							</thead>
							<tbody>
								for _, h := range history {
									<tr class="hover">
										<td class="font-medium">{ h.Month }</td>
										<td>
											<span class="font-semibold">{ fmt.Sprintf("%.1f", h.AverageValue) }</span>
											<span class="text-base-content/70 ml-1">{ gauge.Unit }</span>
										</td>
										<td>
											<span class="font-semibold">{ fmt.Sprintf("%.1f", gauge.Target) }</span>
											<span class="text-base-content/70 ml-1">{ gauge.Unit }</span>
										</td>
										<td>
											if h.AverageValue >= gauge.Target {
												<div class="badge badge-error gap-2">
													<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
														<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
													</svg>
													Above Target
												</div>
											} else {
												<div class="badge badge-success gap-2">
													<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
														<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 17h8m0 0V9m0 8l-8-8-4 4-6-6" />
													</svg>
													On Track
												</div>
											}
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>

		<script>
			// Prepare chart data
			const ctx = document.getElementById('trendsChart').getContext('2d');
			const data = {
				labels: [ for _, h := range history { h.Month } ],
				datasets: [{
					label: 'Average Value',
					data: [ for _, h := range history { h.AverageValue } ],
					borderColor: '#570DF8',
					backgroundColor: '#570DF822',
					fill: true,
					tension: 0.4
				}, {
					label: 'Target',
					data: Array(history.length).fill({ fmt.Sprintf("%.1f", gauge.Target) }),
					borderColor: '#F87272',
					borderDash: [5, 5],
					fill: false
				}]
			};

			// Create chart
			new Chart(ctx, {
				type: 'line',
				data: data,
				options: {
					responsive: true,
					maintainAspectRatio: false,
					plugins: {
						legend: {
							position: 'top',
						}
					},
					scales: {
						y: {
							beginAtZero: true,
							ticks: {
								callback: function(value) {
									return value + ' ' + { gauge.Unit };
								}
							}
						}
					},
					interaction: {
						intersect: false,
						mode: 'index'
					}
				}
			});
		</script>
	}
}
