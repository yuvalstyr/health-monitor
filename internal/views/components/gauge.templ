package components

import (
	"fmt"
	"health-monitor/internal/db"
)

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

templ GaugeValue(gauge *db.Gauge, value float64) {
	<div id={ fmt.Sprintf("gauge-value-%d", gauge.ID) } class="space-y-2 sm:space-y-3">
		<div class="flex justify-between items-baseline">
			<div class={ "text-3xl sm:text-4xl font-bold transition-all", templ.KV("text-primary", value <= gauge.Target), templ.KV("text-error animate-pulse", value > gauge.Target) }>
				{ fmt.Sprintf("%.1f", value) }
				<span class="text-sm sm:text-base font-normal text-base-content/60 ml-1">{ gauge.Unit }</span>
			</div>
			<div class="badge badge-md">
				Target: { fmt.Sprintf("%.1f", gauge.Target) } { gauge.Unit }
			</div>
		</div>
		<div class="w-full h-2 sm:h-3 bg-base-200/50 rounded-full overflow-hidden">
			<div 
				class={ "h-full rounded-full transition-all", templ.KV("bg-primary", value <= gauge.Target), templ.KV("bg-error", value > gauge.Target) }
				style={ fmt.Sprintf("width: %d%%", min(int(value/gauge.Target*100), 100)) }
			></div>
		</div>
		<div class="text-xs text-base-content/70 flex justify-between items-center">
			<span>{ fmt.Sprintf("%d%% of target", min(int(value/gauge.Target*100), 100)) }</span>
			<span class="badge badge-sm">
				{ gauge.Frequency }
			</span>
		</div>
	</div>
}

templ GaugeCard(gauge *db.Gauge) {
	<div id={ fmt.Sprintf("gauge-card-%d", gauge.ID) } class="card w-64 h-64 bg-base-100 shadow-lg hover:shadow-xl transition-all">
		<div class="card-body p-3 relative flex flex-col">
			<!-- Edit button in top right corner -->
			<a href={ templ.URL(fmt.Sprintf("/admin/gauges/%d", gauge.ID)) } class="btn btn-circle btn-sm btn-ghost absolute top-2 right-2">
				<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" /></svg>
			</a>
			
			<!-- Compact header with larger icon and name -->
			<div class="flex items-center gap-3 mt-2">
				<div class="p-3 rounded-lg bg-primary/10">
					@Icon(gauge.Icon, "w-8 h-8 text-primary")
				</div>
				<div class="flex-grow">
					<h2 class="text-xl font-bold leading-tight mb-0">{ gauge.Name }</h2>
					<div class="text-sm text-base-content/70">
						{ gauge.Frequency } 
						if gauge.Direction == "under" {
							<span>↓</span>
						} else {
							<span>↑</span>
						}
					</div>
				</div>
			</div>
			
			<!-- Gauge value and target -->
			<div class="flex justify-between items-baseline mt-2">
				<div class="text-4xl font-bold">
					{ fmt.Sprintf("%.1f", gauge.Value) }
					<span class="text-sm font-normal text-base-content/60 ml-1">{ gauge.Unit }</span>
				</div>
				<div class="text-sm">
					Target: { fmt.Sprintf("%.1f", gauge.Target) }
				</div>
			</div>
			
			<!-- Progress bar -->
			<div class="w-full h-3 bg-base-200/50 rounded-full overflow-hidden mt-2">
				<div 
					class={ "h-full rounded-full", templ.KV("bg-primary", (gauge.Direction == "under" && gauge.Value <= gauge.Target) || (gauge.Direction == "over" && gauge.Value >= gauge.Target)), templ.KV("bg-error", (gauge.Direction == "under" && gauge.Value > gauge.Target) || (gauge.Direction == "over" && gauge.Value < gauge.Target)) }
					style={ fmt.Sprintf("width: %d%%", min(int(gauge.Value/gauge.Target*100), 100)) }
				></div>
			</div>
			
			<!-- Larger increment/decrement buttons, vertically centered -->
			<div class="flex justify-center gap-4 items-center flex-grow mt-2">
				<button 
					class="btn btn-circle btn-md bg-error text-white shadow-md"
					hx-post={ fmt.Sprintf("/gauges/%d/decrement", gauge.ID) }
					hx-target={ fmt.Sprintf("#gauge-card-%d", gauge.ID) }
					hx-swap="outerHTML"
				>
					<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" /></svg>
				</button>
				<button 
					class="btn btn-circle btn-md bg-success text-white shadow-md"
					hx-post={ fmt.Sprintf("/gauges/%d/increment", gauge.ID) }
					hx-target={ fmt.Sprintf("#gauge-card-%d", gauge.ID) }
					hx-swap="outerHTML"
				>
					<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" /></svg>
				</button>
			</div>
		</div>
	</div>
}

templ Gauge(gauge *db.Gauge) {
	<div id={ fmt.Sprintf("gauge-%d", gauge.ID) } class="p-4 bg-base-100 rounded-lg shadow">
		<div class="flex items-center gap-2">
			<div class="p-2 bg-primary/10 rounded-lg">
				@Icon(gauge.Icon, "w-6 h-6 text-primary")
			</div>
			<h2 class="text-lg font-bold">{ gauge.Name }</h2>
			<span class="badge badge-sm ml-auto">{ gauge.Frequency }</span>
			<span class="badge badge-sm">
				if gauge.Direction == "under" {
					<span>↓</span>
				} else {
					<span>↑</span>
				}
			</span>
		</div>
		
		<div class="my-3">
			@GaugeValue(gauge, gauge.Value)
		</div>
		
		<div class="flex justify-center gap-2 mt-3">
			<button 
				class="btn btn-sm btn-success"
				hx-post={ fmt.Sprintf("/gauges/%d/increment", gauge.ID) }
				hx-target={ fmt.Sprintf("#gauge-%d", gauge.ID) }
				hx-swap="outerHTML"
			>+</button>
			<button 
				class="btn btn-sm btn-error"
				hx-post={ fmt.Sprintf("/gauges/%d/decrement", gauge.ID) }
				hx-target={ fmt.Sprintf("#gauge-%d", gauge.ID) }
				hx-swap="outerHTML"
			>-</button>
		</div>
	</div>
}
