package components

import (
	"fmt"
	"health-monitor/internal/db"
)

templ Gauge(gauge *db.Gauge) {
	<div class="card bg-base-100 shadow-xl">
		<div class="card-body">
			<div class="flex items-center justify-between">
				<h2 class="card-title">{ gauge.Name }</h2>
				<div class="text-primary">
					@Icon(gauge.Icon, "h-6 w-6")
				</div>
			</div>
			if gauge.Description.Valid {
				<p class="text-base-content/70">{ gauge.Description.String }</p>
			}
			<div class="flex items-center justify-between mt-4">
				<div class="stats shadow">
					<div class="stat">
						<div class="stat-title">Current</div>
						<div class="stat-value">{ fmt.Sprintf("%.1f", gauge.Value) }</div>
						<div class="stat-desc">{ gauge.Unit }</div>
					</div>
					<div class="stat">
						<div class="stat-title">Target</div>
						<div class="stat-value">{ fmt.Sprintf("%.1f", gauge.Target) }</div>
						<div class="stat-desc">{ gauge.Unit }</div>
					</div>
				</div>
			</div>
			<div class="card-actions justify-end mt-4">
				<form
					method="POST"
					action={ templ.SafeURL(fmt.Sprintf("/gauges/%d/decrement", gauge.ID)) }
					hx-boost="true"
					hx-target={ fmt.Sprintf("#gauge-%d", gauge.ID) }
					hx-swap="outerHTML"
					class="flex-none"
				>
					<button type="submit" class="btn btn-primary btn-outline btn-sm">
						<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
						</svg>
					</button>
				</form>
				<form
					method="POST"
					action={ templ.SafeURL(fmt.Sprintf("/gauges/%d/increment", gauge.ID)) }
					hx-boost="true"
					hx-target={ fmt.Sprintf("#gauge-%d", gauge.ID) }
					hx-swap="outerHTML"
					class="flex-none"
				>
					<button type="submit" class="btn btn-primary btn-outline btn-sm">
						<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
						</svg>
					</button>
				</form>
				<a
					href={ templ.SafeURL(fmt.Sprintf("/admin/gauges/%d", gauge.ID)) }
					class="btn btn-primary btn-outline btn-sm"
				>
					<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
					</svg>
				</a>
				<form
					method="DELETE"
					action={ templ.SafeURL(fmt.Sprintf("/admin/gauges/%d", gauge.ID)) }
					hx-boost="true"
					hx-target="closest .card"
					class="flex-none"
				>
					<button type="submit" class="btn btn-error btn-outline btn-sm">
						<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
						</svg>
					</button>
				</form>
			</div>
		</div>
	</div>
}

templ GaugeCard(gauge *db.Gauge, value float64) {
	<div 
		class="card bg-base-100 shadow-xl"
		id={ fmt.Sprintf("gauge-%d", gauge.ID) }
	>
		<div class="card-body">
			<div class="flex items-center justify-between">
				<h2 class="card-title">{ gauge.Name }</h2>
				<a href={ templ.SafeURL(fmt.Sprintf("/admin/gauges/%d", gauge.ID)) } class="btn btn-outline btn-primary btn-sm">
					Edit
				</a>
			</div>
			
			<div class="flex items-center justify-center space-x-4 py-4">
				<button 
					class="btn btn-primary btn-circle btn-sm"
					hx-post={ fmt.Sprintf("/gauges/%d/decrement", gauge.ID) }
					hx-target={ fmt.Sprintf("#gauge-%d", gauge.ID) }
					hx-swap="outerHTML"
					hx-push-url="false"
				>-</button>
				
				<div class="text-center">
					<div class="flex items-center justify-center h-24 w-24">
						if value > gauge.Target {
							<div class="text-error">
								@Icon(gauge.Icon, "h-16 w-16")
							</div>
						} else {
							<div class="text-primary">
								@Icon(gauge.Icon, "h-16 w-16")
							</div>
						}
					</div>
					<div class="mt-2">
						<span class="text-2xl font-bold">{ fmt.Sprintf("%.1f", value) }</span>
						<span class="text-base-content/70">{ gauge.Unit }</span>
					</div>
					<div class="text-sm text-base-content/50">Target: { fmt.Sprintf("%.1f", gauge.Target) }</div>
				</div>

				<button 
					class="btn btn-primary btn-circle btn-sm"
					hx-post={ fmt.Sprintf("/gauges/%d/increment", gauge.ID) }
					hx-target={ fmt.Sprintf("#gauge-%d", gauge.ID) }
					hx-swap="outerHTML"
					hx-push-url="false"
				>+</button>
			</div>
		</div>
	</div>
}

func getIconColor(value float64, target float64) string {
	if value > target {
		return "text-red-500"
	}
	return "text-green-500"
}
