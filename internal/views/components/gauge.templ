package components

import (
	"fmt"
	"health-monitor/internal/db"
)

templ GaugeValue(gauge *db.Gauge, value float64) {
	<div id={ fmt.Sprintf("gauge-value-%d", gauge.ID) } class="space-y-3 sm:space-y-4">
		<div class="flex justify-between items-center">
			<div class={ "text-4xl sm:text-5xl font-bold transition-all", templ.KV("text-cyan-500", value <= gauge.Target), templ.KV("text-error animate-pulse", value > gauge.Target) }>
				{ fmt.Sprintf("%.1f", value) }
				<span class="text-sm sm:text-base font-normal text-base-content/60 ml-1">{ gauge.Unit }</span>
			</div>
			<div class="badge badge-lg badge-outline">
				Target: { fmt.Sprintf("%.1f", gauge.Target) } { gauge.Unit }
			</div>
		</div>
		<div class="w-full h-2.5 sm:h-3 bg-base-200/50 rounded-lg overflow-hidden shadow-inner">
			<div 
				class={ "h-full rounded-full transition-all", templ.KV("bg-teal-500", value <= gauge.Target), templ.KV("bg-error", value > gauge.Target) }
				style={ fmt.Sprintf("width: %d%%", min(int(value/gauge.Target*100), 200)) }
				class="transition-all duration-500 ease-in-out"
			></div>
		</div>
		<div class="text-xs text-base-content/40 hidden sm:block">
			{ fmt.Sprintf("%d%% of target", min(int(value/gauge.Target*100), 100)) }
		</div>
	</div>
}

templ GaugeCard(gauge *db.Gauge) {
	<div class="card bg-base-100 shadow-xl hover:shadow-2xl transition-all group">
		<div class="card-body p-3 sm:p-6">
			// Header with icon and menu
			<div class="flex justify-between items-start">
				<div class="flex items-center gap-2 sm:gap-3">
					<div class={ "p-2 sm:p-3 rounded-xl transition-all", templ.KV("bg-primary/10", gauge.Value <= gauge.Target), templ.KV("bg-error/10", gauge.Value > gauge.Target) }>
						@Icon(gauge.Icon, "w-5 h-5 sm:w-6 sm:h-6 text-primary group-hover:scale-110 transition-all")
					</div>
					<div>
						<h2 class="card-title text-base sm:text-lg mb-0 sm:mb-1">{ gauge.Name }</h2>
						if gauge.Description.Valid {
							<p class="text-xs sm:text-sm text-base-content/60 hidden sm:block">{ gauge.Description.String }</p>
						}
					</div>
				</div>
				<div class="dropdown dropdown-end">
					<label tabindex="0" class="btn btn-ghost btn-xs sm:btn-sm btn-circle opacity-50 hover:opacity-100">
						@Icon("more-vertical", "w-3 h-3 sm:w-4 sm:h-4")
					</label>
					<ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
						<li>
							<a href={ templ.URL(fmt.Sprintf("/admin/gauges/%d?source=gauge_button", gauge.ID)) } class="w-full flex items-center gap-2">
								@Icon("edit", "w-4 h-4")
								<span>Edit</span>
							</a>
						</li>
						<li>
							<button
								hx-delete={ fmt.Sprintf("/gauges/%d", gauge.ID) }
								hx-target="body"
								hx-swap="outerHTML"
								hx-push-url="/admin"
								hx-confirm="Are you sure you want to delete this gauge?"
								class="text-error">
								@Icon("trash", "w-4 h-4")
								<span>Delete</span>
							</button>
						</li>
					</ul>
				</div>
			</div>

			// Value display and progress
			<div id={ fmt.Sprintf("gauge-value-%d", gauge.ID) } class="mt-3 sm:mt-6">
				@GaugeValue(gauge, gauge.Value)
			</div>

			// Controls
			<div class="card-actions justify-center items-center mt-3 pt-3 sm:mt-4 sm:pt-4 border-t border-base-200">
				<div class="grid grid-cols-2 gap-6 w-full max-w-[180px]">
					<button
						hx-post={ fmt.Sprintf("/gauges/%d/decrement", gauge.ID) }
						hx-target={ fmt.Sprintf("#gauge-value-%d", gauge.ID) }
						hx-swap="innerHTML"
						class="btn btn-error btn-sm w-full font-bold">
						-
					</button>
					<button
						hx-post={ fmt.Sprintf("/gauges/%d/increment", gauge.ID) }
						hx-target={ fmt.Sprintf("#gauge-value-%d", gauge.ID) }
						hx-swap="innerHTML"
						class="btn btn-success btn-sm w-full font-bold">
						+
					</button>
				</div>
			</div>
		</div>
	</div>
}

templ Gauge(gauge *db.Gauge) {
	<div id={ fmt.Sprintf("gauge-%d", gauge.ID) } class="w-64 h-64 mx-auto">
		<div id={ fmt.Sprintf("gauge-header-%d", gauge.ID) } class="bg-base-100 p-4 rounded-xl shadow-lg border border-base-300 hover:border-teal-500/30 transition-all duration-300 w-full h-full flex flex-col">
			<!-- Header with icon and name -->
			<div class="flex items-center gap-3 mb-3">
				<div class="p-3 bg-teal-500/10 rounded-xl shadow-inner">
					@Icon(gauge.Icon, "w-8 h-8 text-teal-500")
				</div>
				<div class="flex-grow">
					<h1 class="text-lg sm:text-xl font-bold">{ gauge.Name }</h1>
					if gauge.Description.Valid {
						<p class="text-base-content/70 text-xs badge badge-ghost badge-sm">{ gauge.Description.String }</p>
					}
				</div>
				<!-- Square status indicator -->
				<div class={ "w-12 h-12 flex items-center justify-center rounded-lg font-bold text-white border-4", 
					templ.KV("bg-success border-success/30", gauge.Value <= gauge.Target), 
					templ.KV("bg-error border-error/30 animate-pulse", gauge.Value > gauge.Target) }>
					if gauge.Value <= gauge.Target {
						<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
						</svg>
					} else {
						<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
						</svg>
					}
				</div>
			</div>

			<!-- Stats grid -->
			<div class="grid grid-cols-2 gap-3 flex-grow my-2">
				<div class="bg-base-200/60 rounded-lg p-3 text-center shadow-inner">
					<div class="text-xs uppercase tracking-wider opacity-60 mb-1">Current</div>
					<div class="text-xl sm:text-2xl font-bold">{ fmt.Sprintf("%.1f", gauge.Value) }</div>
					<div class="text-xs uppercase tracking-wider opacity-60">{ gauge.Unit }</div>
				</div>
				<div class="bg-base-200/60 rounded-lg p-3 text-center shadow-inner">
					<div class="text-xs uppercase tracking-wider opacity-60 mb-1">Target</div>
					<div class="text-xl sm:text-2xl font-bold">{ fmt.Sprintf("%.1f", gauge.Target) }</div>
					<div class="text-xs uppercase tracking-wider opacity-60">{ gauge.Unit }</div>
				</div>
			</div>
			
			<!-- Action buttons with improved styling -->
			<div class="grid grid-cols-4 gap-3 mt-3">
				<button 
					class="btn bg-teal-600 hover:bg-teal-700 text-white btn-square aspect-square shadow-md hover:shadow-lg transition-all" 
					hx-post={ fmt.Sprintf("/gauges/%d/increment", gauge.ID) }
					hx-target={ fmt.Sprintf("#gauge-%d", gauge.ID) }
					hx-swap="outerHTML"
					hx-push-url="false"
				>
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
					</svg>
				</button>

				<button
					class="btn btn-error btn-square aspect-square shadow-md hover:shadow-lg transition-all"
					hx-post={ fmt.Sprintf("/gauges/%d/decrement", gauge.ID) }
					hx-target={ fmt.Sprintf("#gauge-%d", gauge.ID) }
					hx-swap="outerHTML"
					hx-push-url="false"
				>
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
					</svg>
				</button>

				<a href={ templ.URL(fmt.Sprintf("/admin/gauges/%d", gauge.ID)) } class="btn btn-ghost btn-square aspect-square border border-base-300 shadow-sm hover:shadow-md transition-all">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
					</svg>
				</a>

				<button
					class="btn btn-error btn-square aspect-square shadow-md hover:shadow-lg transition-all"
					hx-delete={ fmt.Sprintf("/admin/gauges/%d", gauge.ID) }
					hx-target={ fmt.Sprintf("#gauge-%d", gauge.ID) }
					hx-swap="outerHTML"
					hx-push-url="false"
					hx-confirm="Are you sure you want to delete this gauge?"
				>
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
					</svg>
				</button>
			</div>
		</div>
	</div>
}
